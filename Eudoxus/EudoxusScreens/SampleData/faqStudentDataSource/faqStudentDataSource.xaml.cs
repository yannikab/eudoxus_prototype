//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.faqStudentDataSource
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class faqs { }
#else

	public class faqs : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public faqs()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/Eudoxus.Screens;component/SampleData/faqStudentDataSource/faqStudentDataSource.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private questionCollection _questionCollection = new questionCollection();

		public questionCollection questionCollection
		{
			get
			{
				return this._questionCollection;
			}
		}
	}

	public class question : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _text = string.Empty;

		public string text
		{
			get
			{
				return this._text;
			}

			set
			{
				if (this._text != value)
				{
					this._text = value;
					this.OnPropertyChanged("text");
				}
			}
		}

		private answerCollection _answerCollection = new answerCollection();

		public answerCollection answerCollection
		{
			get
			{
				return this._answerCollection;
			}
		}
	}

	public class answer : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _text = string.Empty;

		public string text
		{
			get
			{
				return this._text;
			}

			set
			{
				if (this._text != value)
				{
					this._text = value;
					this.OnPropertyChanged("text");
				}
			}
		}
	}

	public class questionCollection : System.Collections.ObjectModel.ObservableCollection<question>
	{ 
	}

	public class answerCollection : System.Collections.ObjectModel.ObservableCollection<answer>
	{ 
	}
#endif
}
